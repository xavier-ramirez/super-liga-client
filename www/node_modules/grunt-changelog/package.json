{
  "name": "grunt-changelog",
  "description": "Generate a changelog based on commit messages.",
  "version": "0.2.2",
  "homepage": "https://github.com/ericmatthys/grunt-changelog",
  "author": {
    "name": "Eric Matthys",
    "email": "ericmatthys@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/ericmatthys/grunt-changelog.git"
  },
  "bugs": {
    "url": "https://github.com/ericmatthys/grunt-changelog/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/ericmatthys/grunt-changelog/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "underscore": "~1.6.0",
    "handlebars": "~2.0.0",
    "moment": "~2.0.0"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt": "~0.4.0"
  },
  "peerDependencies": {
    "grunt": "~0.4.0"
  },
  "keywords": [
    "gruntplugin",
    "grunt",
    "changelog",
    "release notes"
  ],
  "readme": "# grunt-changelog\n\n>\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-changelog --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-changelog');\n```\n\n## The \"changelog\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `changelog` to the data object passed into `grunt.initConfig()`. The task, by default, will go through the last 7 days of commit messages, looking for issues that were closed or fixed. It will then generate a template-based changelog with those changes and write them to a destination file.\n\n```js\ngrunt.initConfig({\n  changelog: {\n    sample: {\n      options: {\n        // Task-specific options go here.\n      }\n    }\n  },\n})\n```\n\n```\nNEW:\n\n  - Feature 1\n  - Feature 2\n  - Feature 3\n\nFIXES:\n\n  - Fix 1\n  - Fix 2\n```\n\n### Options\n\n#### options.after\nType: `String`\nDefault value: `7 days ago`\n\nA date string, commit SHA, or tag that the git log will start at.\n\n#### options.before\nType: `String`\nDefault value: `now`\n\nA date string, commit SHA, or tag that the git log will end at. The type must match what was used for after (e.g. you cannot use a date string for after and a commit SHA for before).\n\n#### options.featureRegex\nType: `RegEx`\nDefault value: `/^(.*)closes #\\d+:?(.*)$/gim`\n\nThe regular expression used to match feature changes.\n\n#### options.fixRegex\nType: `RegEx`\nDefault value: `/^(.*)fixes #\\d+:?(.*)$/gim`\n\nThe regular expression used to match bug fix changes.\n\n#### options.log\nType: `String`\nDefault value: `undefined`\n\nThe log file to parse for changes. If nothing is set, a git log command will be run.\n\n#### options.dest\nType: `String`\nDefault value: `changelog`\n\nThe file path to write the changelog to.\n\n#### options.insertType\nType: `String`\nDefault value: `undefined`\n\nCan be set to `prepend`, or `append`.  This will prepend / append the changelog to the file set by `options.dest`.  If nothing is set, the `options.dest` file will be overwritten.\n\n#### options.template\nType: `String`\nDefault value: `{{> features}}{{> fixes}}`\n\nThe Handlebars template used for creating the changelog.\n\n#### options.partials.features\nType: `String`\nDefault value: `'NEW:\\n\\n{{#if features}}{{#each features}}{{> feature}}{{/each}}{{else}}{{> empty}}{{/if}}\\n'`\n\nThe Handlebars partial used for the list of features.\n\n#### options.partials.feature\nType: `String`\nDefault value: `'  - {{this}}\\n'`\n\nThe Handlebars partial used for each individual feature.\n\n#### options.partials.fixes\nType: `String`\nDefault value: `'FIXES:\\n\\n{{#if fixes}}{{#each fixes}}{{> fix}}{{/each}}{{else}}{{> empty}}{{/if}}'`\n\nThe Handlebars partial used for the list of fixes.\n\n#### options.partials.fix\nType: `String`\nDefault value: `'  - {{this}}\\n'`\n\nThe Handlebars partial used for each individual fix.\n\n#### options.partials.empty\nType: `String`\nDefault value: `'  (none)\\n'`\n\nThe Handlebars partial used by features or fixes when there are no changes.\n\n### Usage Examples\n\n#### Default Options\nIn this example, the default options are used to create the changelog. A git log command will run for logs starting 7 days ago until now and the changelog will be generated matching commit messages with fixes and closes.\n\n```js\ngrunt.initConfig({\n  changelog: {\n    sample: {\n      options: {}\n    }\n  },\n})\n```\n\nchangelog.txt\n```\nNEW:\n\n  - Feature 1\n  - Feature 2\n  - Feature 3\n\nFIXES:\n\n  - Fix 1\n  - Fix 2\n```\n\n#### Custom Range\nIn this example, a custom date range is used to only show changes between March 1st and March 14th.\n\n```js\ngrunt.initConfig({\n  changelog: {\n    sample: {\n      options: {\n        after: '2013-03-01',\n        before: '2013-03-14'\n      }\n    }\n  },\n})\n```\n\nYou can also pass values for after and before directly.\n\nFrom 1/12/2014 to today\n\n```\n$ grunt changelog:sample:1/12/2014\n```\n\nFrom commit dffcc01 to 6408ff7\n\n```\n$ grunt changelog:sample:dffcc01:6408ff7\n```\n\nFrom tag 0.9.8 to HEAD\n\n```\n$ grunt changelog:sample:0.9.8\n```\n\n#### Custom Destination\nIn this example, a custom destination is used to write the changelog to a different location.\n\n```js\ngrunt.initConfig({\n  changelog: {\n    sample: {\n      options: {\n        dest: 'release-notes/<%= package.version %>.txt'\n      }\n    }\n  },\n})\n```\n\n#### Custom Formatting\nIn these examples, custom formatting is used to create a simple changelog with the list of features and fixes.\n\n```js\ngrunt.initConfig({\n  changelog: {\n    sample: {\n      options: {\n        dest: 'release-notes/<%= package.version %>.txt',\n        template: '{{date}}\\n\\n{{> features}}{{> fixes}}'\n      }\n    }\n  },\n})\n```\n\nrelease-notes/1.0.0.txt\n```\n2013-05-01\n\nNEW:\n\n  - Feature 1\n  - Feature 2\n  - Feature 3\n\nFIXES:\n\n  - Fix 1\n  - Fix 2\n```\n\n```js\ngrunt.initConfig({\n  changelog: {\n    sample: {\n      options: {\n        dest: 'release-notes/<%= package.version %>.txt',\n        partials: {\n          features: '{{#each features}}{{> feature}}{{/each}}',\n          feature: '[NEW] {{this}}\\n',\n          fixes: '{{#each fixes}}{{> fix}}{{/each}}',\n          fix: '[FIX] {{this}}\\n'\n        }\n      }\n    }\n  },\n})\n```\n\nrelease-notes/1.0.0.txt\n```\n[NEW] Feature 1\n[NEW] Feature 2\n[NEW] Feature 3\n[FIX] Fix 1\n[FIX] Fix 2\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n",
  "readmeFilename": "README.md",
  "_id": "grunt-changelog@0.2.2",
  "_from": "grunt-changelog@^0.2.2"
}
