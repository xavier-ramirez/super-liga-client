{
  "name": "gruntfile-gtx",
  "version": "0.3.0",
  "description": "Turbo, spoilers and a sunroof for your Gruntfile",
  "author": {
    "name": "Bart van der Schoor",
    "url": "https://github.com/Bartvds"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Bartvds/gruntfile-gtx.git"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/Bartvds/gruntfile-gtx/blob/master/LICENSE-MIT"
    }
  ],
  "bugs": {
    "url": "https://github.com/Bartvds/gruntfile-gtx/issues"
  },
  "keywords": [
    "grunt",
    "gruntfile",
    "script",
    "macro",
    "tasks",
    "alias",
    "generator"
  ],
  "main": "lib/gtx.js",
  "readmeFilename": "README.md",
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "grunt-concurrent": "~0.5.0",
    "load-grunt-tasks": "~0.4.0"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "mkdirp": "0.3.5",
    "grunt-wait": "~0.1.0",
    "grunt-mocha-test": "~0.5.0",
    "mocha-unfunk-reporter": "~0.2",
    "grunt-contrib-jshint": "~0.6.1",
    "grunt-contrib-clean": "~0.5.0",
    "jshint-path-reporter": "~0.1",
    "grunt-run-grunt": "~0.1.3",
    "underscore": "1.5.1",
    "chai": "1.6.1",
    "chai-fs": "0.0.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "readme": "# gruntfile-gtx\n\n[![Build Status](https://secure.travis-ci.org/Bartvds/gruntfile-gtx.png?branch=master)](http://travis-ci.org/Bartvds/gruntfile-gtx) [![Dependency Status](https://gemnasium.com/Bartvds/gruntfile-gtx.png)](https://gemnasium.com/Bartvds/gruntfile-gtx) [![NPM version](https://badge.fury.io/js/gruntfile-gtx.png)](http://badge.fury.io/js/gruntfile-gtx)\n\n> Turbo, spoilers and a sunroof for your Gruntfile.\n\n[Grunt](http://www.gruntjs.com) enhancement to make gruntfile task management more dynamic and powerful. Handle demanding setups while keeping your Gruntfile shiny and DRY.\n\n## Features\n\n* Use macros to generate chains of related (semi-anonymous) plugin task instances.\n* Use tags to group and select similar targets.\n* Create new aliases by filtering tasks on various fields.\n* Transparently streamline gruntfile api a little.\n\nMacros are powerful to define chains of targets for different plugins that together define a blueprint for build-sub-process. Create different instances that share or change parameters like identifiers, (partial) paths.\n\n### API Change\n\nPer `v0.1.0` the API was updated. The old docs can be found [here](https://github.com/Bartvds/gruntfile-gtx/commit/3472afa6546980e2a00933023c357dd516fcba2c)\n\n## Usage\n\nCheck the [Gruntfile](https://github.com/Bartvds/gruntfile-gtx/blob/master/Gruntfile.js) for practical [dogfooding](https://en.wikipedia.org/wiki/Dogfooding) and [browse the tests](https://github.com/Bartvds/gruntfile-gtx/tree/master/test/spec) for some more options.\n\n### Example\n\n\n````js\nmodule.exports = function (grunt) {\n\n\t// get the gtx instance\n\tvar gtx = require('gruntfile-gtx').wrap(grunt);\n````\n\nLoad some plugins:\n````js\n\tgtx.loadNpm(\n\t\t'myPlugin',\n\t\t'myOtherPlugin'\n\t);\n\t//classic array\n\tgtx.loadNpm([\n\t\t'myPlugin',\n\t\t'myOtherPlugin'\n\t]);\n\t// folder\n\tgtx.loadTasks('./tasks');\n\t\n\t// alternately load automatically (from ./tasks and ./node_modules)\n\tgtx.loadAuto();\n````\n\nBuild the grunt config like the regular structure:\n````js\n\tgtx.config({\n\t\t// read and blend objects\n\t\tpkg: gtx.readJSON('package.json', {title: 'foo'}, './conf/overwrite.json'),\n\t\tmyPlugin: {\n\t\t\toptions: {\n\t\t\t\t//..\n\t\t\t},\n\t\t\tmain: {\n\t\t\t\tsrc: ['./files/main/*.js']\n\t\t\t}\n\t\t},\n\t\tmyOtherPlugin: {\n\t\t\tmain: {\n\t\t\t\tsrc: ['./files/dev/*.js']\n\t\t\t}\n\t\t}\n\t});\n\t// ... but split over multiple statements\n\tgtx.config({\n\t\tmyPlugin: {\n\t\t\tdev: {\n\t\t\t\tsrc: ['./files/dev/*.js']\n\t\t\t}\n\t\t}\n\t});\n\t// or directly set config objects\n\tgtx.configFor('myPlugin', 'beta', {\n\t\tsrc: ['./files/beta/*.js']\n\t});\n````\n\nDefine tasks:\n````js\n\t// define a simple task\n\tgtx.call('say', function() {\n\t\tgrunt.log.writeln('hello!');\n\t});\n\n\t// define a multi-task\n\tgtx.multi('alpha_multi', function() {\n\t\tvar options = this.options({\n\t\t\t//..\n\t\t});\n\t\tgrunt.log.writeln('hello!');\n\t});\n````\n\nRun tasks:\n````js\t\n\t// named serial\n\tgtx.alias('many', ['one', 'two', 'three']);\n\n\t// named concurrent (max cpu cores)\n\tgtx.concurrent('many', ['one', 'two', 'three']);\n````\n\nGenerate a unique name for a configuration (this is the basis for the macro feature)\n````js\n\tvar name = gtx.configFor('myPlugin', {\n\t\tsrc: ['./files/gamma/*.js']\n\t});\n\n\t// do creative stuff by generating tasks (go wild here)\n\tgtx.alias('bulk_run', ['one', 'two', 'three'].map(function (name) {\n\t\treturn gtx.configFor('myPlugin', {\n\t\t\tsrc: ['./files/' + name + '.js']\n\t\t});\n\t}));\n\n\t// generated tasks from parallel() to run concurrently\n\tgtx.alias('many', ['one', gtx.parallel('two', 'three')]);\n\n\t// generated tasks from serial()\n\tgtx.alias('more', ['one', \n\t\tgtx.parallel(\n\t\t\tgtx.serial('two', 'three'),\n\t\t\tgtx.serial('four', 'five'))\n\t\t)\n\t]);\n````\n\nThis example is lifted from the [gruntfile of TSD](https://github.com/DefinitelyTyped/tsd/blob/develop-0.5.x/Gruntfile.js) and shows a macro to compile and run separated 'test modules'. These can also be run concurrently to cut-down on overall test-duration for IO heavy topics. \n\nNote how the macro uses a few plugins to setup and run: it would be a hassle to maintain these modules in a regular gruntfile but it is easy when using a macro to build the instance: \n\n````js\n\tgtx.define('module_tester', function (macro, id) {\n\t\t// the macro object is a context with helpers to assemble a new instance named 'id'\n\n\t\t// let's use the instance id to build a shared path\n\t\tvar testPath = 'test/modules/' + id + '/';\n\n\t\t// use grunt-contrib-clean to remove old test output\n\t\tmacro.add('clean', [testPath + 'tmp/**/*']);\n\n\t\t// run a regular task\n\t\tmacro.run('myPlugin:dev');\n\n\t\t// use grunt-ts to compile the TypeScript test cases\n\t\tmacro.add('ts', {\n\t\t\toptions: {},\n\t\t\tsrc: [testPath + 'src/**/*.ts'],\n\t\t\tout: testPath + 'tmp/' + id + '.test.js'\n\t\t});\n\t\t// use grunt-tslint\n\t\tmacro.add('tslint', {\n\t\t\tsrc: [testPath + 'src/**/*.ts']\n\t\t});\n\t\t// optionally spawn a grunt-contrib-connect\n\t\tif (macro.getParam('http', 0) > 0) {\n\t\t\tmacro.add('connect', {\n\t\t\t\toptions: {\n\t\t\t\t\tport: macro.getParam('http'),\n\t\t\t\t\tbase: testPath + 'www/'\n\t\t\t\t}\n\t\t\t});\n\t\t\t//tag for easy retrieval\n\t\t\tmacro.tag('http');\n\t\t}\n\t\t// run grunt-mocha-test on the compiled test cases\n\t\tmacro.add('mochaTest', {\n\t\t\toptions: {\n\t\t\t\ttimeout: macro.getParam('timeout', 2000)\n\t\t\t},\n\t\t\tsrc: [testPath + 'tmp/**/*.test.js']\n\t\t});\n\t}, {\n\t\t// optionally run parallel using grunt-concurrent (for now only from gtx-type)\n\t\tconcurrent: 4\n\t});\n````\n\nUse the macro to make many similar instances:\n````js\n\t// use the macro to make many instances\n\tgtx.create('git', 'module_tester', null, 'lib');\n\tgtx.create('tsd', 'module_tester', {timeout: 10000}, 'lib,core');\n\tgtx.create('http', 'module_tester', {\n\t\ttimeout: 20000,\n\t\thttp: 8080\n\t}, 'lib');\n\t// bulk\n\tgtx.create('basic,remote,local', 'module_tester');\n\tgtx.create(['basic','remote','local'], 'module_tester');\n````\n\nMix functions and id's:\n````js\n\t// mix calls in alias\n\tgtx.alias('mix', ['alpha:one', 'bravo:two', function() {\n\t\tgrunt.log.writeln('roger');\n\t}, 'charlie', function() {\n\t\tgrunt.log.writeln('roger');\n\t}]);\n````\n\nFinish up:\n````js\n\t// let's make an alias to run all instances as your $ grunt test\n\tgtx.alias('test', 'gtx-type:module_tester');\n\n\t// alias is short-cut for grunt.registerTask();\n\tgtx.alias('default', ['test']);\n\n\t// compile and send to grunt.initConfig()\n\tgtx.finalise();\n};\n````\n\nTo run these macro instances:\n````\n$ grunt -h\n$ grunt gtx:git\n$ grunt gtx-group:core\n$ grunt gtx-group:http\n$ grunt gtx-type:module_tester\n\n// bonus: clean all\n$ grunt clean\n````\n\n### Additional examples:\n\n* Complex example from [mocha-unfunk-reporter](https://github.com/Bartvds/mocha-unfunk-reporter/blob/abc2732c1c44aca17dc8a7c647aa1f3d7313279e/Gruntfile.js) uses a macro to setup a CLI output bulk tester (this is also a warning about power and responsibility).\n\n## Info\n\n*\tYour gruntfile is still a regular gruntfile to run by `grunt-cli`. \n\t*\tUse the `grunt -h` command to view the generated tasks.\n\t*\tMain difference is to import and apply `gruntfile-gtx` on start if the Gruntfile.\n\t*\tCall `gtx.finalise()` at the end of the file to generate the config and apply aliases. \n*\tGenerated aliases are prefixed with `gtx`, like `gtx-select:myAlias` or `gtx-group:dev`.\n\t*\tThey run like any task created by `grunt.registerTask()`. \n*\tThe extra API sugar like `gtx.loadNpm()` is optional, but is generally DRY-er then the regular versions.\n*\tString input uses a form of expansion and iteration where applicable.\n\t*\tSplit strings on separators to array: `gtx.alias('name', 'one, two, three')`\n\t*\tNested arrays are flattened and the content split: `gtx.alias('name', [['aa','bb'], 'cc', ['dd, ee'],'ff,gg,hh'])`  \n\t*\tWhere grunt methods accept a single string the alias will iterate: `gtx.loadNpm([..])`\n*\tGruntfile-gtx was grown organically: no gold-plating but some edges made shiny from wear.\n\n## Future\n\nThere a lot of ideas for this floating around for this, from auto-dependency chains and non-repeating macro util tasks, to globbing helpers to generate macro instances and flows adapting to custom cli parameters or env variables. Also it would be cool to interface with (Yeoman) generators for easy instancing of build sub modules.\n\nMost of these wait until Grunt reaches `0.5.0` which solve some of the original problems.\n\n## API\n\nSee above usage examples and look at the [Gruntfile](https://github.com/Bartvds/gruntfile-gtx/blob/master/Gruntfile.js) and [the tests](https://github.com/Bartvds/gruntfile-gtx/tree/master/test/spec) for more usage.\n\n# History\n\n* 0.3.0 - Updated dependencies (thanks @boneskull)\n* 0.2.5 - Fixed `gtx.call()` and `macro.call()`.\n* 0.2.3 - Fixed `gtx.multi()`, added `gtx.concurrent()`, `gtx.serial()`, `gtx.parallel()`\n* 0.2.2 - Output fix.\n* 0.2.1 - Added `macro.call()`, `gtx.call()`, `gtx.multi()`, added function support to `gtx.alias()`.\n* 0.1.1 - Fixed some bugs\n* 0.1.0 - Renamed some methods on `gtx` api, added `gtx.readJSON()`/`gtx.readYAML()` helpers\n* 0.0.8 - Cleaned task, small fixes, bundle [load-grunt-tasks](https://github.com/sindresorhus/load-grunt-tasks) (via `grunt.loadAuto()`)\n* 0.0.5 - Added concurrent-execution to `gtx:type`\n* 0.0.3 - NPM push\n* 0.0.2 - Various construction work\n\n## Contributing\n\nContributions are welcome (idiomatic, clean etc) but best to post a proposal in the [Issues](https://github.com/Bartvds/gruntfile-gtx/issues) before making big changes. \n\n## Vagrant\n\nThere is a Vagrantfile and set of Chef cookbooks to use with [Vagrant](http://www.vagrantup.com) for easy testing on a Linux VM. It will install a node.js from package, install the dependencies and enable grunt.\n\n## License\n\nCopyright (c) 2013 Bart van der Schoor\n\nLicensed under the MIT license.\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/Bartvds/gruntfile-gtx/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\n",
  "_id": "gruntfile-gtx@0.3.0",
  "_from": "gruntfile-gtx@^0.3.0"
}
